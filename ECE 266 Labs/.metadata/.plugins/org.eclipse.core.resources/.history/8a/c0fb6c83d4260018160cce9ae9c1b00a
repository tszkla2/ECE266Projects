 /*
 * main.c: For Lab 5, Sleeping LaunchPad
 *
 * Created by Zhao Zhang.
 */

#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include <inc/hw_memmap.h>
#include <inc/hw_ints.h>
#include <driverlib/gpio.h>
#include <driverlib/pin_map.h>
#include <driverlib/sysctl.h>
#include <driverlib/interrupt.h>
#include <driverlib/systick.h>
#include "launchpad.h"
#include "rotary.h"
#include "seg.h"
#include "seg7digit.h"

static uint8_t seg7Coding[10] = {
        0b00111111,         // digit 0
        0b00000110,         // digit 1
        0b01011011,         // digit 2
        0b01001111,         // digit 3
        0b01100110,         // digit 4
        0b01101101,         // digit 5
        0b01111101,         // digit 6
        0b00000111,         // digit 7
        0b01111111,         // digit 8
        0b01101111,         // digit 9
};

static switch_t rotaryState = Off;
static uint8_t colon = 0;

uint32_t colonhalf = 0;
uint32_t digit1 = 0;
uint32_t digit2 = 0;
uint32_t digit3 = 0;
uint32_t digit4 = 0;

seg7Display_t seg7Display = {
    0, 0, 0, 0, 0
};

seg7Display_t seg7DisplayReset = {
    0, 0, 0, 0, 0
};

void
checkPushButton(uint32_t time)
{
    int code = pbRead();
    uint32_t delay;

    switch (code) {
    case 1:
        rotaryState = Off;
        delay = 250;
        break;

    case 2:
        rotaryState = On;
        delay = 250;
        break;

    default:
        delay = 250;
    }

    schdCallback(checkPushButton, time + delay);
}

void rotaryUse()
{
    uint8_t code[4];
    uint8_t curNum;
    uint8_t digit1;
    uint8_t digit2;
    uint8_t digit3;
    uint8_t digit4;


    if(rotaryState = Off)
    {
        curNum = 4095 / rotaryGet();
    }

    else
    {
        curNum = rotaryGet();
    }

    digit1 = curNum % 10
    digit2 = curNum % 100
    digit3 = curNum % 1000
    digit4 = curNum % 10000

    if(digit1 == 0)
        digit1 = nullptr;
    else if(digit2 == 0)
        digit2 = nullptr;
    else if(digit3 == 0)
        digit3 = nullptr;
    else if(digit4 == 0)
        digit4 = nullptr;


    code[0] = seg7Coding[digit1];
    code[1] = seg7Coding[digit2];
    code[2] = seg7Coding[digit3];
    code[3] = seg7Coding[digit4];
    seg7Update(code);
}


int
main(void){

    lpInit();
    seg7Init();
    rotaryInit();


	uprintf("%s\n\r", "Lab 6: Knob Control");

	seg7DigitUpdate(&seg7Display);

	schdCallback(rotaryUse, 1000);
	schdCallback(checkPushButton, 1005);

	while(true)
	{
	  schdExecute();

	}
}
