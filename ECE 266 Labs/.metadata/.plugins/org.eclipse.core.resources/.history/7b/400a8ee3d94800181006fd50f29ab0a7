/*
 * main.c for Lab 8, spring 2018
 *
 * Created by Zhao Zhang
 */

#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include <driverlib/sysctl.h>
#include "launchpad.h"
#include "buzzer.h"
#include "light.h"

//static enum {Run, Pause}
//sysState = Pause;
uint8_t sysStateLed;
uint8_t sysStateBuz;


pwmB_t intensityBuzzerTable[] = {

  {227272, 1000}, // A3 - 0
  {202478, 1000}, // B3 - 1
  {191112, 1000}, // C4 - 2
  {170264, 1000}, // D4 - 3
  {151685, 1000}, // E4 - 4
  {143172, 1000}, // F4 - 5
  {127552, 1000}, // G4 - 6
  {113636, 1000}, // A4 - 7
  {101238, 1000}, // B4 - 8
  {95556, 1000},  // C5 - 9
  {85131, 1000},  // D5 - 10
  {75843, 1000},  // E5 - 11
  {71586, 1000},  // F5 - 12
  {63776, 1000},  // G5 - 13
  {100, 1}        // Blank - 14
};

/*
 * Check the push button. SW1 is the RUN key, SW2 is the PAUSE key
 */
void
checkPushButton(uint32_t time)
{
    int code = pbRead();
    uint32_t delay;

    switch (code) {
    case 1:
        if(sysStateLed == 0)
            sysStateLed = 1;
        else if(sysStateLed == 1)
            sysStateLed = 0;
        delay = 250;
        break;

    case 2:
        if(sysStateBuz == 0)
            sysStateBuz = 1;
        else if(sysStateBuz == 1)
            sysStateBuz = 0;
        delay = 250;
        break;

    default:
        delay = 10;
    }

    schdCallback(checkPushButton, time + delay);
}


int counts = 0;
int song1[]= {4,14,3,14,2,14,3,14,4,14,4,14,4,14,3,14,3,14,3,14,4,14,6,14,6,14,4,14,3,14,2,14,3,14,4,14,4,14,4,14,4,14,3,14,3,14,4,14,3,14,2,14,14,14}; // put song here
int song2[]= {0,14,3,14,3,14,3,14,4,14,5,14,5,14,5,14,4,14,3,14,4,14,5,14,3,14,5,14,5,14,6,14,7,14,7,14,6,14,5,14,6,14,7,14,5,14,3,14,3,14,4,14,5,14,5,14,4,14,3,14,4,14,5,14,3,14,0,14,0,14,3,14,3,14,3,14,4,14,5,14,5,14,5,14,4,14,3,14,4,14,5,14,3,14,14,14};
int song3[]= {3,14,6,14,6,14,3,14,3,14,4,14,4,14,3,14,3,14,6,14,6,14,7,14,7,14,8,14,6,14,8,14,8,14,9,14,9,14,9,14,7,14,7,14,8,14,8,14,8,14,6,14,6,14,7,14,7,14,7,14,6,14,5,14,3,14,4,14,5,14,6,14,6,14,14,14};
int song4[]= {3,14,3,14,5,14,5,14,4,14,5,14,4,14,3,14,5,14,5,14,7,14,7,14,6,14,7,14,6,14,5,14,8,14,8,14,8,14,7,14,7,14,7,14,8,14,8,14,8,14,7,14,6,14,6,14,6,14,5,14,5,14,5,14,4,14,5,14,4,14,3,14,14,14};
int song5[]= {1,14,3,14,8,14,7,14,6,14,1,14,3,14,6,14,5,14,2,14,3,14,9,14,6,14,7,14,7,14,6,14,4,14,3,14,1,14,3,14,8,14,7,14,6,14,1,14,3,14,6,14,5,14,2,14,6,14,9,14,8,14,6,14,7,14,4,14,5,14,6,14,14,14};
void soundUpdate(uint32_t time)
{

    if(sysStateBuz == 1){
        buzzerOn(intensityBuzzerTable[song5[counts]].pwmPeriod, intensityBuzzerTable[song5[counts]].pwmPeriod - intensityBuzzerTable[song5[counts]].pwmDutyCycle);
        counts++;
        if(counts == 75)
        {
            counts = 0;
        }
        schdCallback(soundUpdate, time + 300);
    }
    else
    {
        schdCallback(soundUpdate, time + 200);
    }

    //  -Song in words
    // E D C D E E E D D D E G G E D C D E E E E D D E D C
    //    FREQUENCY   CLOCK CYCLES
    // A3 (220.000) = (227272.727)
    // B3 (246.94) = (202478.335)
    // C4 (261.626) = (191112.504)
    // D4 (293.665) = (170262.033)
    // E4 (329.628) = (151686.143)
    // F4 (349.228) = (143172.941)
    // G4 (391.995) = (143172.941)
    // A4 (440.000) = (113636.364)
    // B4 (493.883) = (101238.552)
    // C5 (523.251) = (95556.435)
    // D5 (587.33) = (85131.017)
    // E5 (659.25) = (75843.762)
    // F5 (698.46) = (71586.061)
    // G5 (783.99) = (63776.324)
}

// {
void main(void)
{
    lpInit();
    pwmledInit();
    buzzerInit();

    uprintf("%s\n\r", "Lab 8: Music Player");


    // Schedule the first callback events for LED flashing and push button checking.
    // Those trigger callback chains. The time unit is millisecond.
    schdCallback(checkPushButton, 1005);
    schdCallback(soundUpdate, 1015);

    // Loop forever
    while (true) {
        schdExecute();
    }
}
